Forensics:
	101:
		flag: flag{wow!_data_is_cool}
		solution: using strings command to see texts
	
	Talking LS:
		flag: ABCTF{T3Rm1n4l_is_C00l}
		solution: ls -aR,found all hidden directory. found password for a pdf, open password protected pdf
	
	wow... so meta:
		flag: flag{EEe_x_I_FFf}
		solution: use exiftool to found flag in the metadata.

	Binwalk:
		flag: ABCTF{b1nw4lk_is_us3ful}
		solution: file command say it's png, but file name is jpg, binwalk command says there are two png binary, extract it with binwalk -D='.*' filename. to extract all files. then we can find a png file with the flag.

	Exif:
		flag: flag{3l1t3_3x1f_4uth0r1ty_dud3br0}
		solution: using Exiftool on the to see the flag in the metadata.

	Rubber Duck:
		challenge no: 933
		flag: CTFlearn{ILoveJakarta}
		solution: using exiftool -b filename to extract binary data from metadata to see file. also can be found by `strings filename | grep -i ctf` to see the flag.

	07601:
		challenge no: 97
		flag: ABCTF{Du$t1nS_D0jo}
		solution: binwalk showed binary footprints of 3 zip files. extracted them using binwalk -D='.*' filename. using estrings in one of the zip file we got the flag. `strings filename | grep -i ctf` reveals the flag.

	Git Is Good:
		challenge no: 104
		flag: flag{protect_your_git}
		solution: `unzip filename`. then foud a folder with .git initialized. `git show` command reveals the old commits. and we can see the flag now.

	I'm a dump:
		challenge no: 883
		flag: CTFlearn{fl4ggyfl4g}
		solution: `xxd -d filename` command showed the flag with he.u inpurity replacing the character reveals the real flag.

	Brute Force is Fun!:
		challenge no: 365
		flag: FLAG{may_the_brute_force_be_with_you}
		solution: with `binwalk -D='.*' filename` extract the files. it was a password protected zip file. `running 7z x zipfile` would extract any other files that aren't password protected. found a clue file with password formate ctflag****** where * means a number. generated a custom passfile. `zip2john zipfile > hash` now ready to crack zip with custom dictionary. `john hash --wordlist=custompass` found the password. unzip file with password found another flag.zip file. `unzip flag.zip`. found a base64 encoded text. `echo base64encodedtext | base64 -d`. found the flag.

	Snowboard:
		Challenge no: 934
		flag: CTFlearn{SkiBanff}
		solution: exiftool reveals a fake flag, `file filename` commad reveals a hiddent base64 encoded comment in file type. wich lead us to actual flag.


	PikesPeak:
		challenge no: 935
		flag: CTFlearn{Gandalf}
		solution: `strings PikesPeak.jpg | grep -i ctf` showed many flags with different flag formates. correct one has the correct flag format. flag format is CTFlearn{}

	Tux!:
		challenge no: 973
		flag: CTFlearn{Linux_Is_Awesome}
		solution: exiftool reveals a base64 encode password. found a zip binary footprint in the file with binwalk command. it was a password protected zip file. using the password found previously to unzip it found the flag file.

	PDF by fdpumyp:
		challenge: 957
		flag: CTFlearn{)_1l0w3y0Um00my123}
		solution: using strings, we got base64 encoded messages wich reveals the messy flag.

	Minions:
		challenge no: 955
		flag: CTFlearn{M1NI0NS_ARE_C00L}
		solution: `binwalk -D='.*' filename` extracted the rar file. `unrar x filename` rarreveals MEGA link. can be done with `strings` command. again another jpg file repeating the same process. found YouWin(almost).jpg file. `strings filename` reveals a base64 encoded string. decoding it 4 times reveals the flag.

	Chalkboard:
		challenge no: 972
		flag: CTFlearn{I_Like_Math_2_5}
		solution: have to solved two math equation for x and y. problem can be found in the metadata. 


	Pho Is Tasty!
		challenge no: 971
		flag: CTFlearn{I_Love_Pho!!!}
		solution: `xxd -d filename | head` found the flag mixed with random inpurity.

	Simple Stegnography:
		challenge no: 894
		flag: CTFlearn{this_is_fun}
		solution: found `keyword: myadmin` in metadata of file using exiftool. using `steghide extract -sf filename -xf file -p myadmin` command base64 encoded flag was found.

	GandalfTheWise:
		challenge no: 936
		flag: CTFlearn{Gandalf.BilboBaggins}
		solution: found two base64 encoded data with `file filename` command. xor two of these strings together gives the flag.

	Blank Page:
		challenge no: 959
		flag: CTFlearn{If_y0u_r3/\d_thi5_you_pa553d}
		solution: convert ' ' to 0 and '\u200f' to 1 and read the binary to get the flag.

	abandoned place:
		challenge no: 1000
		flag: CTFlearn{urban_exploration}
		solution: baseline encoding, change the forth value from FF C0 to change hight with hexeditor, to get the flag

	Milk's Best Friend:
		challenge no: 195
		flag: flag{eat_more_oreos}
		solution: `binwalk -D='.*' filename` to extract a hiddent rar file. unrar it to get a jpg file. using `strings filename` to get the flag.

	Digital Camouflage:
		challenge no: 237
		flag: CTFlearn{PApdsjRTae}
		solution: using wireshark, found urlEncoded-->base64encoded password.

	Smiling ASCII:
		challenge no: 903
		flag: CTFlearn{ascii_pixel_flag}
		solution: using `zsteg -a filename` got the flag

	HailCaesar!:
		challenge no : 952
		flag: CTFlearn{Maximus.Decimus.Meridius}
		solution: `strings to get encoded messages. decode that with caesar cipher mod 128 brute forece it. found two scraps of flag combine those two to get the flag key=18 and key=51.

	A CAPture of a Flag:
        	challenge no: 356
        	flag: flag{AFlagInPCAP}
        	solution: open the pcap file with wireshark, and found the base64 encoded flag in the http url parameter.

	Up For A Little Challenge?:
        	challenge no: 142
        	flag: flag{hack_complete}
        	solution: got some intersting password with string. and a mega link, unziping the file got and password protected zip. used previos passwords unziped it to get a image the flag is very very small and can be found on the image.

	Corrupted File:
                challenge no: 138
                flag: flag{g1f_or_j1f}
                solution: In header first 4 common hex digit are missing which is 'GIF8' adding it in the front now we can open the file. using convert file.gif frames.png command we can view and analyze each frame. found base64 encoded flag.	

	Mr.Bin:
		chellenge no: 997
		flag: CTFlearn{y0u_n4il3d_it}
		solution: with exiftool found encoded base64 message decoded into "600x600_picture". with binwalk found encrypted zip file. rockyou didn't help. generate password with `string image.jpg > password` password cracked 'mr_b1n'. unziping the file  found 0's and 1's. turn them into a grayscale png image to found the flag mirrored and clockwise rotated 90degree.

	The adventures of Boris Ivanov. Part 1.:
		challenge no: 373
		flag: flag{d0nt_m3s5_w1th_th3_KGB}
		solution: open the challenge jpg file in stegsolver. used stereogram solver option. slide the image and found the flag at offset 898.

	Exclusive Santa
		challenge no: 851
		flag: CTFleam(Santa_1s_C0ming}
		solution: Downloaded challenge rar file. found 1.png and 3.png after extract the rar. after running `binwalk 3.png` found another png binary. `binwalk -D='.*' 3.png` to extract it. rename it 2.png. with stegsolve xoring image 1.png and 2.png found the flag.

	Naughty Cat:
		challenge no: 890
		flag: CTFlearn{f0r3n51cs_ma5t3r}
		solution: download the challenge file which name is cut3_c4t.png. `binwalk cut3_c4t.png` found that a rar archive is hidding. run `binwalk -D='.*' cut3_c4t.png`. `unrar x filename`. foudn two files. 'purrr_2.mp3' and 'y0u_4r3_cl0s3.rar'. `xxd -d y0u_4r3_cl0s3.rar` found the header is altered. `hexeditor y0u_4r3_cl0s3.rar` and change the header from 'Cat!' to 'Rar!'. it was password protected. after unsing spectrum analyzer found the password "sp3ctrum_1s_y0ur_fr13nd". using the password to unrar found "f1n4lly.txt". found base64 encoded flag in the file.

	Seeing is believing:
		challenge no : 441
		flag: the_flag_is{A_sP3c7r0grAm?!}
		solution: help.me is an .ogg audio file. with sprectrogram in SonicAnalyzer found a qr code. scanning it lead me to a pastbin.com url where I found the flag.

	MountainMan:
		challenge no: 888
		flag : CTFlearn{Ubuntu_r0ck5}
		solution: as the clue said there are two ff d9 marker in jpg file. so copied all the hex values after the first ff d9 flag then check it with the known text CTFlearn{, found a common key 203 so xor the hex with the value to found the whole flag.

	Music To My Ears:
		challenge no : 220
		flag : CTFlearn{1_c4n_f1x_it}
		solution: first 32 bytes are all wrong in the m4a file header. 1st 4 bytes represents ftyp block size including itself. wich is 32. ftypM4A_ followed by 4 bytes of 00. after editing first 32 bytes we can here the flag.

	The Keymaker:
		challenge no: 912
		flag : CTFlearn{Ne0.TheMatrix}
		solution : sos(start of scan) 'ff da' copy 32 bytes of hex after the marker that will be the key, and sof0(start of frame) 'ff c0', iv started after 2bytes for 'ffc0' as the clue said. fuck the clue. so copy 16 bytes of hex after 2bytes of marker.


















WEB:
	Don't Bump Your Head(er):
		challenge no: 109
		flag: flag{did_this_m3ss_with_y0ur_h34d}
		solution: a simple command solved the problem. curl -v -A "Sup3rS3cr3tAg3nt" -H "Referer: awesomesauce.com"  http://165.227.106.113/header.php

	
	POST Practice:
		challenge no: 114
		flag: flag{p0st_d4t4_4ll_d4y}
		solution: a simple curl command solved the challenge.  `curl -X POST -d "username=admin&password=71urlkufpsdnlkadsf" -v http://165.227.106.113/post.php`













Miscellaneous:
	
	Time Traveller:
		challenge no: 1072
		flag: CTFlearn{today@nasa.gov}
		solution: waybackmachine helped me to solve this.
















Binary:
	Simple bof:
		Challenge no: 1010
		flag: CTFlearn{buffer_0verflows_4re_c00l!}
		Solution: C code reveals that gets used which is vulnerable to buffer overflow.

	Reykjavik:
		challenge no: 990
		flag: CTFlearn{Eye_L0ve_Iceland_}
		Solution: have to found the global variable address <data> then print memory location of <data>. perform xor operation with those values.














Cryptography:
	Character Encoding:
		challenge no: 115
		flag: ABCTF{45C11_15_U53FUL}
		Solution: character encoded in ASCII hexadecimal, solved with cyberchef(from hex)

	Base 2 2 the 6:
		challenge no: 192
		flag: CTF{FlaggyWaggyRaggy}
		Solution: encoded in base64. solved with command `echo "Q1RGe0ZsYWdneVdhZ2d5UmFnZ3l9" | base64 -d` 

	Morse Code:
		challenge no: 309
		flag: FLAGSAMUELMORSEISCOOLBYTHEWAYILIKECHEES
		Solution: Morse Code, solved with cyberchef (from morse code)

	Vigenere Cipher:
		challenge no: 305
		flag: flag{CiphersAreAwesome}
		Solution: simple vigenere cipher, solved by my own algorithm writen years ago, https://github.com/rohan37-pro/encryption-algorithms/blob/main/vigenere_cipher.py, also can be solved by cyberchef (vigenere decode).

	


